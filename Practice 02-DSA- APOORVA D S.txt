PRACTICE - 02

1. Given a binary tree, write an iterative and recursive solution to traverse the tree
using inorder traversal.
RECURSIVE:-
-->
#include <iostream>
#include <stack>
using namespace std;
struct Node
{
int data;
Node *left, *right;
Node(int data)
{
this->data = data;
this->left = this->right = nullptr;
}
};
void inorder(Node* root)
{
if (root == nullptr) 
{
return;
}
inorder(root->left);
cout << root->data << " ";
inorder(root->right);
}
int main()
{
    Node* root = new Node(2);
	root->left = new Node(4);
	root->right = new Node(6);
	root->left->left = new Node(8);
	root->right->left = new Node(10);
	root->right->right = new Node(12);
	root->right->left->left = new Node(14);
	root->right->left->right = new Node(16);

	inorder(root);
	return 0;
}

OUTPUT:
8 4 2 14 10 16 6 12

ITERATIVE:-
-->
#include <iostream>
#include <stack>
using namespace std;
struct Node
{
int data;
Node *left, *right;
Node(int data)
{
this->data = data;
this->left = this->right = nullptr;
}
};
void inorderIterative(Node* root)
{
stack<Node*> stack;
Node* curr = root;
while (!stack.empty() || curr != nullptr)
{
if (curr != nullptr)
{
stack.push(curr);
curr = curr->left;
}
else 
{
curr = stack.top();
stack.pop();
cout << curr->data << " ";
curr = curr->right;
}
}
}
int main()
{
    Node* root = new Node(2);
    root->left = new Node(4);
    root->right = new Node(6);
    root->left->left = new Node(8);
    root->right->left = new Node(10);
    root->right->right = new Node(12);
    root->right->left->left = new Node(14);
    root->right->left->right = new Node(16);
 
    inorderIterative(root);
 
    return 0;
}

OUTPUT:
8 4 2 14 10 16 6 12 

2. Given a binary tree, write an iterative and recursive solution to traverse the tree
using preorder traversal.

-->RECURSIVE
#include <iostream>
using namespace std;
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
 
void preorder(Node* root)
{
 
    if (root == nullptr) {
        return;
    }
 

    cout << root->data << " ";
 
    preorder(root->left);
 
    preorder(root->right);
}
 
 
int main()
{
    Node* root = new Node(1);
    root->left = new Node(3);
    root->right = new Node(5);
    root->left->left = new Node(7);
    root->right->left = new Node(2);
    root->right->right = new Node(4);
    root->right->left->left = new Node(6);
    root->right->left->right = new Node(8);
 
    preorder(root);
 
    return 0;
}

OUTPUT:-
1 3 7 5 2 6 8 4 

ITERATIVE:
-->
#include <iostream>
#include <stack>
using namespace std;
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
void preorderIterative(Node* root)
{
    if (root == nullptr)
    return;
    stack<Node*> stack;
    stack.push(root);
    while (!stack.empty())
    {
    Node* curr = stack.top();
        stack.pop();
 
        cout << curr->data << " ";
        if (curr->right) {
            stack.push(curr->right);
        }
        if (curr->left) {
            stack.push(curr->left);
        }
    }
}

int main()
{
    Node* root = new Node(1);
    root->left = new Node(3);
    root->right = new Node(5);
    root->left->left = new Node(7);
    root->right->left = new Node(2);
    root->right->right = new Node(4);
    root->right->left->left = new Node(6);
    root->right->left->right = new Node(8);
 
    preorderIterative(root);
 
    return 0;
}

OUTPUT:-
1 3 7 5 2 6 8 4 

3. Given a binary tree, write an iterative and recursive solution to traverse the tree
using postorder traversal.

RECURSIVE:
--> #include <iostream>
using namespace std;
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
void postorder(Node* root)
{
    if (root == nullptr) {
        return;
    }
postorder(root->left);
postorder(root->right);
cout << root->data << " ";
}
int main()
{
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->right->left = new Node(5);
    root->right->right = new Node(6);
    root->right->left->left = new Node(7);
    root->right->left->right = new Node(8);
 
    postorder(root);
    return 0;
}

OUTPUT:
4 2 7 8 5 6 3 1 

ITERATIVE:
-->#include <iostream>
#include <stack>
using namespace std;
 
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
void postorderIterative(Node* root)
{
    if (root == nullptr) {
        return;
    }
    stack<Node*> s;
    s.push(root);
    stack<int> out;
    while (!s.empty())
    {
        Node* curr = s.top();
        s.pop();
        out.push(curr->data);
        if (curr->left) {
            s.push(curr->left);
        }
 
        if (curr->right) {
            s.push(curr->right);
        }
    }
    while (!out.empty())
    {
        cout << out.top() << " ";
        out.pop();
    }
}
int main()
{
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->right->left = new Node(5);
    root->right->right = new Node(6);
    root->right->left->left = new Node(7);
    root->right->left->right = new Node(8);
    postorderIterative(root);
    return 0;
}

OUTPUT:
4 2 7 8 5 6 3 1 



